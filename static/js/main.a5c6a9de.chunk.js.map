{"version":3,"sources":["config.js","components/ARTCard.js","components/TradeCard.js","App.js","index.js"],"names":["CONTRACT_NAME","process","module","exports","env","networkId","nodeUrl","contractName","walletUrl","helperUrl","keyPath","HOME","masterAccount","Error","GAS","UNIT","BN","ARTCard","currentUser","contract","signOut","signIn","ausdContract","useState","artTotalBalance","setArtTotalBalance","artStakedBalance","setArtStakedBalance","artUnstakedBalance","setArtUnstakedBalance","ausdBalance","setAusdBalance","artPrice","setArtPrice","nearBalance","formatNearAmount","balance","nearPrice","setNearPrice","useEffect","get_total_balance","owner_id","accountId","then","art","get_unstaked_balance","get_staked_balance","account_id","get_price","price","get_balance","ausd","get_asset_price","asset","console","log","deposit","setDeposit","receiver","setReceiver","amount","setAmount","stakeAmount","setStake","unstakeAmount","setUnstake","show","setShow","className","Row","noGutters","style","background","Col","textAlign","onClick","undefined","fontSize","Number","toFixed","Modal","onHide","Header","closeButton","Title","Body","Form","width","onSubmit","event","preventDefault","transfer","new_owner_id","Group","controlId","Label","InputGroup","FormControl","value","onChange","target","Button","type","Footer","nearDeposit","mul","div","buy_art_with_near","toString","Prepend","Text","stake_and_mint","stake","burn_to_unstake","unstake_amount","TradeCard","assetP","setAssetP","assetB","setAssetB","currentAsset","setCurrentAsset","get_asset_balance","assetItems","Object","entries","map","k","aUSD","buyAmount","setBuyAmount","sellAmount","setSellAmount","Control","as","Accordion","Card","Toggle","eventKey","Collapse","toLocaleString","useGrouping","buy_asset_with_ausd","asset_amount","variant","sell_asset_to_ausd","App","nearConfig","wallet","isLoading","setLoading","useCallback","requestSignIn","setTimeout","window","location","Container","Spinner","animation","size","height","a","getConfig","near","nearAPI","deps","keyStore","BrowserLocalStorageKeyStore","walletConnection","getAccountId","account","state","viewMethods","changeMethods","sender","nearInitPromise","initContract","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a5c6a9de.chunk.js","sourcesContent":["const CONTRACT_NAME = process.env.CONTRACT_NAME || 'art.artcoin.testnet'\n\nfunction getConfig (env) {\n  switch (env) {\n    case 'production':\n    case 'mainnet':\n      return {\n        networkId: 'mainnet',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.near.org',\n        helperUrl: 'https://helper.mainnet.near.org'\n      }\n    case 'development':\n    case 'testnet':\n      return {\n        networkId: 'default',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.testnet.near.org',\n        helperUrl: 'https://helper.testnet.near.org'\n      }\n    case 'betanet':\n      return {\n        networkId: 'betanet',\n        nodeUrl: 'https://rpc.betanet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.betanet.near.org',\n        helperUrl: 'https://helper.betanet.near.org'\n      }\n    case 'local':\n      return {\n        networkId: 'local',\n        nodeUrl: 'http://localhost:3030',\n        keyPath: `${process.env.HOME}/.near/validator_key.json`,\n        walletUrl: 'http://localhost:4000/wallet',\n        contractName: CONTRACT_NAME\n      }\n    case 'test':\n    case 'ci':\n      return {\n        networkId: 'shared-test',\n        nodeUrl: 'https://rpc.ci-testnet.near.org',\n        contractName: CONTRACT_NAME,\n        masterAccount: 'test.near'\n      }\n    case 'ci-betanet':\n      return {\n        networkId: 'shared-test-staging',\n        nodeUrl: 'https://rpc.ci-betanet.near.org',\n        contractName: CONTRACT_NAME,\n        masterAccount: 'test.near'\n      }\n    default:\n      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)\n  }\n}\n\nmodule.exports = getConfig","import React, {useEffect, useState} from 'react';\nimport { Row, Col, Button, Form, InputGroup, FormControl, Modal } from 'react-bootstrap';\nimport { formatNearAmount } from \"near-api-js/lib/utils/format\";\nimport BN from 'bn.js'\n\nconst GAS = 300000000000000\nconst UNIT = new BN('1000000000000000000000000')\n\nconst ARTCard = ({currentUser, contract, signIn, signOut, ausdContract}) => {\n    const [artTotalBalance, setArtTotalBalance] = useState('0')\n    const [artStakedBalance, setArtStakedBalance] = useState('0')\n    const [artUnstakedBalance, setArtUnstakedBalance] = useState('0')\n\n    const [ausdBalance, setAusdBalance] = useState('0')\n    const [artPrice, setArtPrice] = useState('0')\n    const nearBalance = formatNearAmount(currentUser.balance,5)\n    const [nearPrice, setNearPrice] = useState('0')\n\n    useEffect(() => {\n        contract.get_total_balance({owner_id: currentUser.accountId})\n        .then((art) => setArtTotalBalance(art))\n        contract.get_unstaked_balance({owner_id: currentUser.accountId})\n        .then((art) => setArtUnstakedBalance(art))\n        contract.get_staked_balance({account_id: currentUser.accountId})\n        .then((art) => setArtStakedBalance(art))\n        contract.get_price()\n        .then((price) => setArtPrice(price))\n        ausdContract.get_balance({owner_id: currentUser.accountId})\n        .then((ausd) => setAusdBalance(ausd))\n        contract.get_asset_price({asset: 'aNEAR'})\n        .then((price) => {\n            setNearPrice(price)\n        })\n    })\n    console.log(contract)\n    // deposit\n    const [deposit, setDeposit] = useState('10')\n\n    const buyArtWithNear = (event) => {\n        event.preventDefault()\n        let nearDeposit = new BN(deposit).mul(new BN(artPrice)).mul(UNIT).div(new BN(nearPrice))\n        contract.buy_art_with_near({}, GAS, nearDeposit.toString())\n    }\n\n    // receiver\n    const [receiver, setReceiver] = useState('')\n    const [amount, setAmount] = useState('')\n\n    const transferArt = (event) => {\n        event.preventDefault()\n        contract.transfer({new_owner_id: receiver, amount: amount + '000000000000000000000000'}, GAS)\n    }\n\n    // stake\n    const [stakeAmount, setStake] = useState('1000')\n\n    const stakeAndmint = (event) => {\n        event.preventDefault()\n        contract.stake_and_mint({stake: stakeAmount + '000000000000000000000000'})\n    }\n\n    //unstake\n    const [unstakeAmount, setUnstake] = useState('1000')\n\n    const burnToUnstake = (event) => {\n        event.preventDefault()\n        contract.burn_to_unstake({unstake_amount: unstakeAmount + '000000000000000000000000'})\n    }\n\n    //modal\n    const [show, setShow] = useState(false);\n\n    return (<div className=\"art-card\">\n    <Row noGutters className=\"p-2 mb-2\" style={{background: '#fff'}}>\n        <Col>NEAR Wallet : {currentUser.accountId} </Col>\n        <Col>NEAR Balance: {nearBalance} Ⓝ</Col>\n        <Col style={{textAlign: 'end'}}>\n            {currentUser && <button onClick={signOut}>Log Out</button>}\n        </Col>\n    </Row>\n    {currentUser !== undefined ?\n    <> \n        <Row noGutters style={{fontSize:\"12px\"}} className=\"p-2 mb-2\">\n            After staking every $5 value of ART, you will mint 1 aUSD. In reverse, after burning 1 aUSD, you will get $5 value of ART back.\n        </Row>\n        <Row noGutters className=\"p-2 mb-2\" style={{background: '#fff'}}>\n            <Col>\n                ART Price: {(Number(artPrice)/10**8).toFixed(2)} $\n            </Col>\n            <Col>\n                NEAR Price: {(Number(nearPrice)/10**8).toFixed(2)} $\n            </Col>\n        </Row>\n        <Row noGutters className=\"p-2 mb-2\">\n            <Col>\n                ART Unstaked Balace: {formatNearAmount(artUnstakedBalance, 5)} ⓐ\n            </Col>\n            <Col>\n                ART Total Balace: {formatNearAmount(artTotalBalance, 5)} ⓐ {' '}\n                <button onClick={() => setShow(true)}>Transfer</button>\n                <Modal show={show} onHide={() =>setShow(false)}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Transfer ART to your hoomie</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Form style={{width: \"100%\"}} onSubmit={transferArt}>\n                            <Form.Group controlId=\"receiver\">\n                                <Form.Label>Receiver: </Form.Label>\n                                <InputGroup className=\"mb-2\" >\n                                    <FormControl \n                                        value={receiver}\n                                        onChange={(event) => {\n                                            if (event) {\n                                                const value = event.target !== null ? event.target.value : \"\";\n                                                setReceiver(value)\n                                            }\n                                        }} \n                                    />\n                                </InputGroup>\n                            </Form.Group>\n\n                            <Form.Group controlId=\"sendamount\">\n                                <Form.Label>Send Amount: </Form.Label>\n                                <InputGroup className=\"mb-2\" >\n                                    <FormControl \n                                        value={amount}\n                                        onChange={(event) => {\n                                            if (event) {\n                                                const value = event.target !== null ? event.target.value : \"\";\n                                                setAmount(value)\n                                            }\n                                        }} \n                                    />\n                                </InputGroup>\n                            </Form.Group>\n\n                            <Button type=\"submit\">\n                                Confirm Transfer\n                            </Button>\n                        </Form>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button onClick={() => setShow(false)}>\n                            Close\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </Col>\n        </Row>\n        <Row noGutters className=\"p-2 mb-2\">\n            <Col>\n                <Form style={{width: \"100%\"}} onSubmit={buyArtWithNear}>\n                    <Form.Row className=\"align-items-center\">\n                        <Col className=\"mx-1\">\n                        <InputGroup>\n                            <InputGroup.Prepend>\n                            <InputGroup.Text>ART Amount</InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <FormControl  \n                                value={deposit}\n                                onChange={(event) => {\n                                    if (event) {\n                                        const value = event.target !== null ? event.target.value : \"\";\n                                        setDeposit(value)\n                                    }\n                                }} />\n                        </InputGroup>\n                        </Col>\n                        <Col className=\"mx-1\" style={{textAlign: 'end'}}>\n                        <Button type=\"submit\">Buy ART with NEAR token</Button>\n                        </Col>\n                    </Form.Row>\n                </Form>\n            </Col>\n        </Row>\n        <Row noGutters className=\"p-2 mb-2\" style={{background: '#fff'}}>\n            <Col>\n                AUSD Balance: {formatNearAmount(ausdBalance, 5)} $\n            </Col>\n            <Col>\n                ART Staked Balace: {formatNearAmount(artStakedBalance, 5)} ⓐ\n            </Col>\n        </Row>\n        <Row noGutters className=\"p-2 mb-2\">\n            <Form style={{width: \"100%\"}} onSubmit={stakeAndmint}>\n                <Form.Row className=\"align-items-center\">\n                    <Col className=\"mx-1\">\n                    <InputGroup>\n                        <InputGroup.Prepend>\n                        <InputGroup.Text>Amount</InputGroup.Text>\n                        </InputGroup.Prepend>\n                        <FormControl  \n                            value={stakeAmount}\n                            onChange={(event) => {\n                                if (event) {\n                                    const value = event.target !== null ? event.target.value : \"\";\n                                    setStake(value)\n                                  }\n                            }} />\n                    </InputGroup>\n                    </Col>\n                    <Col className=\"mx-1\" style={{textAlign: 'end'}}>\n                    <Button type=\"submit\">Stake & Mint</Button>\n                    </Col>\n                </Form.Row>\n            </Form>\n        </Row>\n        <Row noGutters className=\"p-2 mb-2\">\n            <Form style={{width: \"100%\"}} onSubmit={burnToUnstake}>\n                <Form.Row className=\"align-items-center\">\n                    <Col className=\"mx-1\">\n                    <InputGroup>\n                        <InputGroup.Prepend>\n                        <InputGroup.Text>Amount</InputGroup.Text>\n                        </InputGroup.Prepend>\n                        <FormControl \n                            value={unstakeAmount}\n                            onChange={(event) => {\n                                if (event) {\n                                    const value = event.target !== null ? event.target.value : \"\";\n                                    setUnstake(value)\n                                  }\n                            }}\n                         />\n                    </InputGroup>\n                    </Col>\n                    <Col className=\"mx-1\" style={{textAlign: 'end'}}>\n                    <Button type=\"submit\">Burn to Unstake</Button>\n                    </Col>\n                </Form.Row>\n            </Form>\n        </Row>\n    </>\n    : <Row noGutters className=\"p-5\">\n        Welcome to ART Wallet, please login with your near account to start\n        </Row>}\n    </div>)\n}\n\nexport default ARTCard","import React, {useState, useEffect} from 'react'\nimport { Row, Col, Button, Form, FormControl, InputGroup, Accordion, Card } from 'react-bootstrap'\nimport { formatNearAmount } from \"near-api-js/lib/utils/format\"\n\nconst GAS = 300000000000000\n\nconst TradeCard = ({contract, accountId}) => {\n\n    const [assetP, setAssetP] = useState({'aNEAR':'0', 'aBTC':'0', 'aGOLD':'0', 'aSPY':'0', 'aEUR':'0'})\n    const [assetB, setAssetB] = useState({'aNEAR':'0', 'aBTC':'0', 'aGOLD':'0', 'aSPY':'0', 'aEUR':'0'})\n    const [currentAsset, setCurrentAsset] = useState(\"aBTC\")\n\n    useEffect(() => {\n        contract.get_asset_price({asset: 'aBTC'})\n        .then((price) => {\n            setAssetP({...assetP,'aBTC': price})\n        })\n\n        contract.get_asset_balance({account_id: accountId, asset: 'aBTC'})\n        .then((balance) =>setAssetB({...assetB, 'aBTC': balance}))\n        \n    }, [])\n\n    const assetItems = Object.entries(assetB).map(([k, _]) =>\n        <option key={k}>\n        {k}\n        </option>\n    )\n\n    const [buyAmount, setBuyAmount] = useState({asset: '0', aUSD: '0'})\n\n    const [sellAmount, setSellAmount] = useState({asset:'0', aUSD: '0'})\n\n    const buyAssetWithAusd = (event) => {\n        event.preventDefault()\n        let amount = (Number(buyAmount.asset)*(10**24)).toLocaleString('fullwide', {useGrouping:false})\n        contract.buy_asset_with_ausd({asset: currentAsset, asset_amount: amount}, GAS)\n    }\n\n    const sellAssettoAusd = (event) => {\n        event.preventDefault()\n        let amount = (Number(sellAmount.asset)*(10**24)).toLocaleString('fullwide', {useGrouping:false})\n        contract.sell_asset_to_ausd({asset: currentAsset, asset_amount: amount}, GAS)\n    }\n\n    return <div className=\"trade-card\">\n    <Row noGutters className=\"p-2\" style={{background: '#fff'}}>\n       <Col>BUY/SELL</Col> \n       <Col>\n            <Form.Group controlId=\"formSelect\">\n                <Form.Control \n                    value={currentAsset} \n                    as=\"select\" \n                    onChange={(event) => {\n                        if (event) {\n                            const value = event.target !== null ? event.target.value : \"\";\n                            setCurrentAsset(value)\n                            contract.get_asset_price({asset: value})\n                            .then((price) => {\n                                setAssetP({...assetP,[value]: price})\n                            })\n                            contract.get_asset_balance({account_id: accountId, asset: value})\n                            .then((balance) =>setAssetB({...assetB, [value]: balance}))\n                          }\n                    }}>\n                    {assetItems}\n                </Form.Control>\n            </Form.Group>\n       </Col>\n    </Row>\n    <Accordion>\n        <Card>\n            <Card.Header>\n                <Accordion.Toggle as={Card.Header} eventKey=\"0\">\n                    BUY\n                </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey=\"0\">\n                <Card.Body>\n                    <Form\n                        onSubmit={buyAssetWithAusd} \n                        style={{width: '100%'}}>\n                        <Form.Group controlId=\"buyAsset\">\n                            <Form.Label>BUY {currentAsset}: </Form.Label>\n                            <InputGroup className=\"mb-2\" >\n                                <InputGroup.Prepend>\n                                    <InputGroup.Text>{currentAsset}</InputGroup.Text>\n                                </InputGroup.Prepend>\n                                <FormControl \n                                    value={buyAmount.asset}\n                                    onChange={(event) => {\n                                        if (event) {\n                                            const value = event.target !== null ? event.target.value : \"\";\n                                            setBuyAmount({asset: value, aUSD: Number(value)*Number(assetP[currentAsset])/10**8})\n                                        }\n                                    }} \n                                />\n                            </InputGroup>\n                        </Form.Group>\n\n                        <Form.Group controlId=\"fromausd\">\n                            <Form.Label>with aUSD: </Form.Label>\n                            <InputGroup className=\"mb-2\">\n                                <InputGroup.Prepend>\n                                <InputGroup.Text>aUSD</InputGroup.Text>\n                                </InputGroup.Prepend>\n                                <FormControl \n                                    value={buyAmount.aUSD}\n                                    onChange={(event) => {\n                                        if (event) {\n                                            const value = event.target !== null ? event.target.value : \"\";\n                                            setBuyAmount({asset: Number(value)/(Number(assetP[currentAsset])/10**8), aUSD: value})\n                                        }\n                                    }} \n                                />\n                            </InputGroup>\n                        </Form.Group>\n                        \n                        <Row style={{fontSize: \"12px\"}}>\n                            <Col>Balace: {formatNearAmount(assetB[currentAsset],5)}</Col>\n                            <Col>Price: 1 {currentAsset} = {(Number(assetP[currentAsset])/10**8).toFixed(4)} aUSD</Col>\n                            <Col>USD VALUE: ${(Number(buyAmount.asset)*Number(assetP[currentAsset])/10**8).toFixed(4)}</Col>\n                        </Row>\n\n                        <Button variant=\"primary\" type=\"submit\">\n                            CONFIRM TRADE\n                        </Button>\n                    </Form>\n                </Card.Body>\n            </Accordion.Collapse>\n        </Card>\n        <Card>\n            <Card.Header>\n            <Accordion.Toggle as={Card.Header} eventKey=\"1\">\n                SELL\n            </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey=\"1\">\n            <Card.Body>\n                <Form \n                    onSubmit={sellAssettoAusd}\n                    style={{width: '100%'}}>\n                    <Form.Group controlId=\"sellAsset\">\n                        <Form.Label>SELL {currentAsset}: </Form.Label>\n                        <InputGroup className=\"mb-2\" >\n                            <InputGroup.Prepend>\n                            <InputGroup.Text>{currentAsset}</InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <FormControl \n                                value={sellAmount.asset}\n                                onChange={(event) => {\n                                    if (event) {\n                                        const value = event.target !== null ? event.target.value : \"\";\n                                        setSellAmount({asset: value, aUSD: Number(value)*Number(assetP[currentAsset])/10**8})\n                                    }\n                                }} \n                                />\n                        </InputGroup>\n                    </Form.Group>\n\n                    <Form.Group controlId=\"toausd\">\n                        <Form.Label>to aUSD: </Form.Label>\n                        <InputGroup className=\"mb-2\">\n                            <InputGroup.Prepend>\n                            <InputGroup.Text>aUSD</InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <FormControl \n                                value={sellAmount.aUSD}\n                                onChange={(event) => {\n                                    if (event) {\n                                        const value = event.target !== null ? event.target.value : \"\";\n                                        setSellAmount({asset: Number(value)/(Number(assetP[currentAsset])/10**8), aUSD: value})\n                                    }\n                                }} \n                            />\n                        </InputGroup>\n                    </Form.Group>\n                    \n                    <Row style={{fontSize: \"12px\"}}>\n                        <Col>Balace: {formatNearAmount(assetB[currentAsset],5)}</Col>\n                        <Col>Price: 1 {currentAsset} = {(Number(assetP[currentAsset])/10**8).toFixed(4)} aUSD</Col>\n                        <Col>USD VALUE: ${(Number(sellAmount.asset)*Number(assetP[currentAsset])/10**8).toFixed(4)}</Col>\n                    </Row>\n\n                    <Button variant=\"primary\" type=\"submit\">\n                        CONFIRM TRADE\n                    </Button>\n                </Form>\n            </Card.Body>\n            </Accordion.Collapse>\n        </Card>\n    </Accordion>\n    </div>\n}\n\nexport default TradeCard\n\n","import React, {useState, useCallback} from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Spinner, Row } from 'react-bootstrap'\nimport ARTCard from './components/ARTCard'\nimport TradeCard from './components/TradeCard'\n\nimport './App.css'\n\nconst App = ({ contract, currentUser, nearConfig, wallet, ausdContract }) => {\n  const [isLoading, setLoading] = useState(false);\n\n  const signIn = useCallback(() => {\n    wallet.requestSignIn(nearConfig.contractName, \"NEAR ART Coin\");\n  }, [wallet, nearConfig]);\n\n  const signOut = useCallback(() => {\n    wallet.signOut();\n    setTimeout(setLoading(true), 5000);\n    window.location = \"/\";\n    setLoading(false);\n  }, [wallet]);\n\n  if (isLoading) {\n    return (\n      <Container>\n      <header>ART Coin Exchange</header>\n      <div>\n      <Spinner animation=\"border\" size=\"sm\" variant=\"warning\"/>\n      <Spinner animation=\"border\" size=\"sm\" variant=\"warning\"/>\n      <Spinner animation=\"border\" size=\"sm\" variant=\"warning\"/>\n      <Spinner animation=\"border\" variant=\"warning\"/>\n      <Spinner animation=\"border\" variant=\"warning\"/>\n      <Spinner animation=\"border\" variant=\"warning\"/>\n      </div>\n    </Container>\n    )\n  }\n\n  if(!currentUser) {\n    return (\n      <Container>\n      <header>ART Coin Exchange</header>\n      <Row noGutters style={{height: '50px'}}>\n        Welcome to ART coin, please log in with NEAR wallet to start journey!\n      </Row>\n      <button onClick={signIn}>Log In</button>\n    </Container>\n    )\n  }\n\n  return (\n    <Container>\n      <header>ART Coin Exchange</header>\n        <ARTCard \n          ausdContract={ausdContract}\n          currentUser={currentUser} \n          contract={contract}\n          signIn={signIn}\n          signOut={signOut}\n        />\n        <hr />\n        <TradeCard \n          contract={contract}\n          accountId={currentUser.accountId}\n        />\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as nearAPI from \"near-api-js\";\nimport getConfig from \"./config\";\n\n// Initializing contract\nasync function initContract() {\n  const nearConfig = getConfig(process.env.NODE_ENV || 'testnet');\n  window.near = nearAPI\n  // Initializing connection to the NEAR TestNet\n  const near = await nearAPI.connect({\n    deps: {\n      keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore()\n    },\n    ...nearConfig\n  });\n  // Needed to access wallet\n  const walletConnection = new nearAPI.WalletConnection(near);\n\n  // Load in account data\n  let currentUser;\n  if(walletConnection.getAccountId()) {\n    currentUser = {\n      accountId: walletConnection.getAccountId(),\n      balance: (await walletConnection.account().state()).amount\n    };\n  }\n\n  // Initializing our contract APIs by contract name and configuration\n  const contract = await new nearAPI.Contract(walletConnection.account(), nearConfig.contractName, {\n    // View methods are read-only – they don't modify the state, but usually return some value\n    viewMethods: [\n                  'get_total_balance', \n                  'get_unstaked_balance', \n                  'get_staked_balance', \n                  'get_price', \n                  'get_asset_price',\n                  'get_asset_balance'\n                ],\n    // Change methods can modify the state, but you don't receive the returned value when called\n    changeMethods: [\n                    'stake_and_mint', \n                    'burn_to_unstake', \n                    'get_some_art',\n                    'buy_asset_with_ausd',\n                    'sell_asset_to_ausd',\n                    'transfer',\n                    'buy_art_with_near'\n                  ],\n    // Sender is the account ID to initialize transactions.\n    // getAccountId() will return empty string if user is still unauthorized\n    sender: walletConnection.getAccountId()\n  });\n\n  const ausdContract = await new nearAPI.Contract(walletConnection.account(), 'ausd.artcoin.testnet', {\n    // View methods are read-only – they don't modify the state, but usually return some value\n    viewMethods: ['get_balance'],\n    // Change methods can modify the state, but you don't receive the returned value when called\n    changeMethods: [],\n    // Sender is the account ID to initialize transactions.\n    // getAccountId() will return empty string if user is still unauthorized\n    sender: walletConnection.getAccountId()\n  });\n\n  return { contract, currentUser, nearConfig, walletConnection, ausdContract };\n}\n\nwindow.nearInitPromise = initContract()\n  .then(({ contract, currentUser, nearConfig, walletConnection, ausdContract }) => {\n    ReactDOM.render(\n      <App\n        ausdContract={ausdContract}\n        contract={contract}\n        currentUser={currentUser}\n        nearConfig={nearConfig}\n        wallet={walletConnection}\n      />,\n      document.getElementById('root')\n    );\n  });\n\n"],"sourceRoot":""}