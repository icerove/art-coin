{"version":3,"sources":["config.js","components/ARTCard.js","components/TradeCard.js","App.js","index.js"],"names":["CONTRACT_NAME","process","module","exports","env","networkId","nodeUrl","contractName","walletUrl","helperUrl","keyPath","HOME","masterAccount","Error","ARTCard","currentUser","contract","signIn","signOut","ausdContract","useState","artTotalBalance","setArtTotalBalance","artStakedBalance","setArtStakedBalance","artUnstakedBalance","setArtUnstakedBalance","ausdBalance","setAusdBalance","artPrice","setArtPrice","nearBalance","formatNearAmount","balance","stakeAmount","setStake","unstakeAmount","setUnstake","useEffect","get_total_balance","owner_id","accountId","then","art","get_unstaked_balance","get_staked_balance","account_id","get_price","price","get_balance","ausd","deposit","receiver","setReceiver","amount","setAmount","stakeAndmint","event","preventDefault","stake_and_mint","stake","show","setShow","className","Row","noGutters","style","background","Col","textAlign","onClick","undefined","Button","variant","console","log","buy_art_with_near","Modal","onHide","Header","closeButton","Title","Body","Form","width","onSubmit","Group","controlId","Label","InputGroup","FormControl","value","onChange","target","type","transfer","new_owner_id","Footer","Number","toFixed","Prepend","Text","burn_to_unstake","unstake_amount","GAS","TradeCard","assetP","setAssetP","assetB","setAssetB","currentAsset","setCurrentAsset","get_asset_price","asset","get_asset_balance","assetItems","Object","entries","map","k","aUSD","buyAmount","setBuyAmount","sellAmount","setSellAmount","Control","as","Accordion","Card","Toggle","eventKey","Collapse","toLocaleString","useGrouping","buy_asset_with_ausd","asset_amount","fontSize","sell_asset_to_ausd","App","nearConfig","wallet","isLoading","setLoading","useCallback","requestSignIn","setTimeout","window","location","Container","Spinner","animation","size","a","getConfig","nearAPI","deps","keyStore","BrowserLocalStorageKeyStore","near","walletConnection","getAccountId","account","state","viewMethods","changeMethods","sender","nearInitPromise","initContract","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.678436a3.chunk.js","sourcesContent":["const CONTRACT_NAME = process.env.CONTRACT_NAME || 'art.artcoin.testnet'\n\nfunction getConfig (env) {\n  switch (env) {\n    case 'production':\n    case 'mainnet':\n      return {\n        networkId: 'mainnet',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.near.org',\n        helperUrl: 'https://helper.mainnet.near.org'\n      }\n    case 'development':\n    case 'testnet':\n      return {\n        networkId: 'default',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.testnet.near.org',\n        helperUrl: 'https://helper.testnet.near.org'\n      }\n    case 'betanet':\n      return {\n        networkId: 'betanet',\n        nodeUrl: 'https://rpc.betanet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.betanet.near.org',\n        helperUrl: 'https://helper.betanet.near.org'\n      }\n    case 'local':\n      return {\n        networkId: 'local',\n        nodeUrl: 'http://localhost:3030',\n        keyPath: `${process.env.HOME}/.near/validator_key.json`,\n        walletUrl: 'http://localhost:4000/wallet',\n        contractName: CONTRACT_NAME\n      }\n    case 'test':\n    case 'ci':\n      return {\n        networkId: 'shared-test',\n        nodeUrl: 'https://rpc.ci-testnet.near.org',\n        contractName: CONTRACT_NAME,\n        masterAccount: 'test.near'\n      }\n    case 'ci-betanet':\n      return {\n        networkId: 'shared-test-staging',\n        nodeUrl: 'https://rpc.ci-betanet.near.org',\n        contractName: CONTRACT_NAME,\n        masterAccount: 'test.near'\n      }\n    default:\n      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)\n  }\n}\n\nmodule.exports = getConfig","import React, {useEffect, useState} from 'react';\nimport { Row, Col, Button, Form, InputGroup, FormControl, Modal } from 'react-bootstrap';\nimport { formatNearAmount } from \"near-api-js/lib/utils/format\";\n\nconst GAS = 300000000000000\n\nconst ARTCard = ({currentUser, contract, signIn, signOut, ausdContract}) => {\n    const [artTotalBalance, setArtTotalBalance] = useState('0')\n    const [artStakedBalance, setArtStakedBalance] = useState('0')\n    const [artUnstakedBalance, setArtUnstakedBalance] = useState('0')\n\n    const [ausdBalance, setAusdBalance] = useState('0')\n    const [artPrice, setArtPrice] = useState('0')\n    const nearBalance = formatNearAmount(currentUser.balance,5)\n    const [stakeAmount, setStake] = useState('1000')\n    const [unstakeAmount, setUnstake] = useState('1000')\n\n    useEffect(() => {\n        contract.get_total_balance({owner_id: currentUser.accountId})\n        .then((art) => setArtTotalBalance(art))\n        contract.get_unstaked_balance({owner_id: currentUser.accountId})\n        .then((art) => setArtUnstakedBalance(art))\n        contract.get_staked_balance({account_id: currentUser.accountId})\n        .then((art) => setArtStakedBalance(art))\n        contract.get_price()\n        .then((price) => setArtPrice(price))\n        ausdContract.get_balance({owner_id: currentUser.accountId})\n        .then((ausd) => setAusdBalance(ausd))\n    })\n\n    const [deposit, setdeposit] = useState('')\n\n    const buyArtWithNear = () => {\n        console.log(\"buy art with near\")\n        contract.buy_art_with_near({}, GAS, deposit)\n    }\n\n    const [receiver, setReceiver] = useState('')\n    const [amount, setAmount] = useState('')\n\n    const transfer = () => {\n        console.log(\"transfer\")\n        contract.transfer({new_owner_id: receiver, amount: amount + '000000000000000000000000'})\n    }\n\n    const stakeAndmint = (event) => {\n        event.preventDefault()\n        contract.stake_and_mint({stake: stakeAmount + '000000000000000000000000'})\n    }\n\n    const burnToUnstake = (event) => {\n        event.preventDefault()\n        contract.burn_to_unstake({unstake_amount: unstakeAmount + '000000000000000000000000'})\n    }\n\n    //modal\n    const [show, setShow] = useState(false);\n\n    return (<div className=\"art-card\">\n    <Row noGutters className=\"p-2 mb-2\" style={{background: '#fff'}}>\n        <Col>NEAR Wallet : {currentUser.accountId} </Col>\n        <Col>NEAR Balance: {nearBalance} Ⓝ</Col>\n        <Col style={{textAlign: 'end'}}>\n            {currentUser ? <button onClick={signOut}>Log Out</button> :\n            <button onClick={signIn}>Log In</button>}\n        </Col>\n    </Row>\n    {currentUser !== undefined ?\n    <> \n        <Row noGutters className=\"p-2 mb-2\">\n            <Col>\n                ART Unstaked Balace: {formatNearAmount(artUnstakedBalance, 5)} ⓐ <br/>\n                ART Staked Balace: {formatNearAmount(artStakedBalance, 5)} ⓐ\n            </Col>\n            <Col>\n                ART Total Balace: {formatNearAmount(artTotalBalance, 5)} ⓐ\n            </Col>\n\n        </Row>\n        <Row noGutters className=\"p-2 mb-2\">\n            <Col>\n                <Button variant=\"primary\" onClick={buyArtWithNear}>Buy ART with NEAR token</Button>\n            </Col>\n            <Col>\n                <Button variant=\"primary\" onClick={() => setShow(true)}>Transfer</Button>\n                <Modal show={show} onHide={() =>setShow(false)}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Transfer ART to your hoomie</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Form style={{width: \"100%\"}} onSubmit={stakeAndmint}>\n                            <Form.Group controlId=\"receiver\">\n                                <Form.Label>Receiver: </Form.Label>\n                                <InputGroup className=\"mb-2\" >\n                                    <FormControl \n                                        value={receiver}\n                                        onChange={(event) => {\n                                            if (event) {\n                                                const value = event.target !== null ? event.target.value : \"\";\n                                                setReceiver(value)\n                                            }\n                                        }} \n                                    />\n                                </InputGroup>\n                            </Form.Group>\n\n                            <Form.Group controlId=\"sendamount\">\n                                <Form.Label>Send Amount </Form.Label>\n                                <InputGroup className=\"mb-2\" >\n                                    <FormControl \n                                        value={amount}\n                                        onChange={(event) => {\n                                            if (event) {\n                                                const value = event.target !== null ? event.target.value : \"\";\n                                                setAmount(value)\n                                            }\n                                        }} \n                                    />\n                                </InputGroup>\n                            </Form.Group>\n\n                            <Button type=\"submit\" onClick={transfer}>\n                                Confirm Transfer\n                            </Button>\n                        </Form>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button onClick={() => setShow(false)}>\n                            Close\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </Col>\n        </Row>\n        <Row noGutters className=\"p-2 mb-2\" style={{background: '#fff'}}>\n            <Col>\n                ART Price: {(Number(artPrice)/10**8).toFixed(2)} $\n            </Col>\n            <Col>\n                AUSD Balance: {formatNearAmount(ausdBalance, 5)} $\n            </Col>\n        </Row>\n        <Row noGutters className=\"p-2 mb-2\">\n            <Form style={{width: \"100%\"}} onSubmit={stakeAndmint}>\n                <Form.Row className=\"align-items-center\">\n                    <Col className=\"mx-1\">\n                    <InputGroup>\n                        <InputGroup.Prepend>\n                        <InputGroup.Text>Amount</InputGroup.Text>\n                        </InputGroup.Prepend>\n                        <FormControl  \n                            value={stakeAmount}\n                            onChange={(event) => {\n                                if (event) {\n                                    const value = event.target !== null ? event.target.value : \"\";\n                                    setStake(value)\n                                  }\n                            }} />\n                    </InputGroup>\n                    </Col>\n                    <Col className=\"mx-1\" style={{textAlign: 'end'}}>\n                    <Button type=\"submit\">Stake & Mint</Button>\n                    </Col>\n                </Form.Row>\n            </Form>\n        </Row>\n        <Row noGutters className=\"p-2 mb-2\">\n            <Form style={{width: \"100%\"}} onSubmit={burnToUnstake}>\n                <Form.Row className=\"align-items-center\">\n                    <Col className=\"mx-1\">\n                    <InputGroup>\n                        <InputGroup.Prepend>\n                        <InputGroup.Text>Amount</InputGroup.Text>\n                        </InputGroup.Prepend>\n                        <FormControl \n                            value={unstakeAmount}\n                            onChange={(event) => {\n                                if (event) {\n                                    const value = event.target !== null ? event.target.value : \"\";\n                                    setUnstake(value)\n                                  }\n                            }}\n                         />\n                    </InputGroup>\n                    </Col>\n                    <Col className=\"mx-1\" style={{textAlign: 'end'}}>\n                    <Button type=\"submit\">Burn to Unstake</Button>\n                    </Col>\n                </Form.Row>\n            </Form>\n        </Row>\n    </>\n    : <Row noGutters className=\"p-5\">\n        Welcome to ART Wallet, please login with your near account to start\n        </Row>}\n    </div>)\n}\n\nexport default ARTCard","import React, {useState, useEffect} from 'react'\nimport { Row, Col, Button, Form, FormControl, InputGroup, Accordion, Card } from 'react-bootstrap'\nimport { formatNearAmount } from \"near-api-js/lib/utils/format\"\n\nconst GAS = 300000000000000\n\nconst TradeCard = ({contract, accountId}) => {\n\n    const [assetP, setAssetP] = useState({'aNEAR':'0', 'aBTC':'0', 'aGOLD':'0', 'aSPY':'0', 'aEUR':'0'})\n    const [assetB, setAssetB] = useState({'aNEAR':'0', 'aBTC':'0', 'aGOLD':'0', 'aSPY':'0', 'aEUR':'0'})\n    const [currentAsset, setCurrentAsset] = useState(\"aBTC\")\n\n    useEffect(() => {\n        contract.get_asset_price({asset: 'aBTC'})\n        .then((price) => {\n            setAssetP({...assetP,'aBTC': price})\n        })\n\n        contract.get_asset_balance({account_id: accountId, asset: 'aBTC'})\n        .then((balance) =>setAssetB({...assetB, 'aBTC': balance}))\n        \n    }, [])\n\n    const assetItems = Object.entries(assetB).map(([k, _]) =>\n        <option key={k}>\n        {k}\n        </option>\n    )\n\n    const [buyAmount, setBuyAmount] = useState({asset: '0', aUSD: '0'})\n\n    const [sellAmount, setSellAmount] = useState({asset:'0', aUSD: '0'})\n\n    const buyAssetWithAusd = (event) => {\n        event.preventDefault()\n        let amount = (Number(buyAmount.asset)*(10**24)).toLocaleString('fullwide', {useGrouping:false})\n        contract.buy_asset_with_ausd({asset: currentAsset, asset_amount: amount}, GAS)\n    }\n\n    const sellAssettoAusd = (event) => {\n        event.preventDefault()\n        let amount = (Number(sellAmount.asset)*(10**24)).toLocaleString('fullwide', {useGrouping:false})\n        contract.sell_asset_to_ausd({asset: currentAsset, asset_amount: amount}, GAS)\n    }\n\n    return <div className=\"trade-card\">\n    <Row noGutters className=\"p-2\" style={{background: '#fff'}}>\n       <Col>BUY/SELL</Col> \n       <Col>\n            <Form.Group controlId=\"formSelect\">\n                <Form.Control \n                    value={currentAsset} \n                    as=\"select\" \n                    onChange={(event) => {\n                        if (event) {\n                            const value = event.target !== null ? event.target.value : \"\";\n                            setCurrentAsset(value)\n                            contract.get_asset_price({asset: value})\n                            .then((price) => {\n                                setAssetP({...assetP,[value]: price})\n                            })\n                            contract.get_asset_balance({account_id: accountId, asset: value})\n                            .then((balance) =>setAssetB({...assetB, [value]: balance}))\n                          }\n                    }}>\n                    {assetItems}\n                </Form.Control>\n            </Form.Group>\n       </Col>\n    </Row>\n    <Accordion>\n        <Card>\n            <Card.Header>\n                <Accordion.Toggle as={Card.Header} eventKey=\"0\">\n                    BUY\n                </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey=\"0\">\n                <Card.Body>\n                    <Form\n                        onSubmit={buyAssetWithAusd} \n                        style={{width: '100%'}}>\n                        <Form.Group controlId=\"buyAsset\">\n                            <Form.Label>BUY {currentAsset}: </Form.Label>\n                            <InputGroup className=\"mb-2\" >\n                                <InputGroup.Prepend>\n                                    <InputGroup.Text>{currentAsset}</InputGroup.Text>\n                                </InputGroup.Prepend>\n                                <FormControl \n                                    value={buyAmount.asset}\n                                    onChange={(event) => {\n                                        if (event) {\n                                            const value = event.target !== null ? event.target.value : \"\";\n                                            setBuyAmount({asset: value, aUSD: Number(value)*Number(assetP[currentAsset])/10**8})\n                                        }\n                                    }} \n                                />\n                            </InputGroup>\n                        </Form.Group>\n\n                        <Form.Group controlId=\"fromausd\">\n                            <Form.Label>with aUSD: </Form.Label>\n                            <InputGroup className=\"mb-2\">\n                                <InputGroup.Prepend>\n                                <InputGroup.Text>aUSD</InputGroup.Text>\n                                </InputGroup.Prepend>\n                                <FormControl \n                                    value={buyAmount.aUSD}\n                                    onChange={(event) => {\n                                        if (event) {\n                                            const value = event.target !== null ? event.target.value : \"\";\n                                            setBuyAmount({asset: Number(value)/(Number(assetP[currentAsset])/10**8), aUSD: value})\n                                        }\n                                    }} \n                                />\n                            </InputGroup>\n                        </Form.Group>\n                        \n                        <Row style={{fontSize: \"12px\"}}>\n                            <Col>Balace: {formatNearAmount(assetB[currentAsset],5)}</Col>\n                            <Col>Price: 1 {currentAsset} = {(Number(assetP[currentAsset])/10**8).toFixed(4)} aUSD</Col>\n                            <Col>USD VALUE: ${(Number(buyAmount.asset)*Number(assetP[currentAsset])/10**8).toFixed(4)}</Col>\n                        </Row>\n\n                        <Button variant=\"primary\" type=\"submit\">\n                            CONFIRM TRADE\n                        </Button>\n                    </Form>\n                </Card.Body>\n            </Accordion.Collapse>\n        </Card>\n        <Card>\n            <Card.Header>\n            <Accordion.Toggle as={Card.Header} eventKey=\"1\">\n                SELL\n            </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey=\"1\">\n            <Card.Body>\n                <Form \n                    onSubmit={sellAssettoAusd}\n                    style={{width: '100%'}}>\n                    <Form.Group controlId=\"sellAsset\">\n                        <Form.Label>SELL {currentAsset}: </Form.Label>\n                            <InputGroup className=\"mb-2\" >\n                                <InputGroup.Prepend>\n                                <InputGroup.Text>{currentAsset}</InputGroup.Text>\n                                </InputGroup.Prepend>\n                                <FormControl \n                                    value={sellAmount.asset}\n                                    onChange={(event) => {\n                                        if (event) {\n                                            const value = event.target !== null ? event.target.value : \"\";\n                                            setSellAmount({asset: value, aUSD: Number(value)*Number(assetP[currentAsset])/10**8})\n                                        }\n                                    }} \n                                 />\n                            </InputGroup>\n                        </Form.Group>\n\n                    <Form.Group controlId=\"toausd\">\n                        <Form.Label>to aUSD: </Form.Label>\n                        <InputGroup className=\"mb-2\">\n                            <InputGroup.Prepend>\n                            <InputGroup.Text>aUSD</InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <FormControl \n                                value={sellAmount.aUSD}\n                                onChange={(event) => {\n                                    if (event) {\n                                        const value = event.target !== null ? event.target.value : \"\";\n                                        setSellAmount({asset: Number(value)/(Number(assetP[currentAsset])/10**8), aUSD: value})\n                                    }\n                                }} \n                            />\n                        </InputGroup>\n                    </Form.Group>\n                    \n                    <Row style={{fontSize: \"12px\"}}>\n                        <Col>Balace: {formatNearAmount(assetB[currentAsset],5)}</Col>\n                        <Col>Price: 1 {currentAsset} = {(Number(assetP[currentAsset])/10**8).toFixed(4)} aUSD</Col>\n                        <Col>USD VALUE: ${(Number(sellAmount.asset)*Number(assetP[currentAsset])/10**8).toFixed(4)}</Col>\n                    </Row>\n\n                    <Button variant=\"primary\" type=\"submit\">\n                        CONFIRM TRADE\n                    </Button>\n                </Form>\n            </Card.Body>\n            </Accordion.Collapse>\n        </Card>\n    </Accordion>\n    </div>\n}\n\nexport default TradeCard\n\n","import React, {useState, useCallback} from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Spinner } from 'react-bootstrap'\nimport ARTCard from './components/ARTCard'\nimport TradeCard from './components/TradeCard'\n\nimport './App.css'\n\nconst App = ({ contract, currentUser, nearConfig, wallet, ausdContract }) => {\n  const [isLoading, setLoading] = useState(false);\n\n  const signIn = useCallback(() => {\n    wallet.requestSignIn(nearConfig.contractName, \"NEAR ART Coin\");\n  }, [wallet, nearConfig]);\n\n  const signOut = useCallback(() => {\n    wallet.signOut();\n    setTimeout(setLoading(true), 5000);\n    window.location = \"/\";\n    setLoading(false);\n  }, [wallet]);\n\n  if (isLoading) {\n    return (\n      <Container>\n      <header>ART Coin Exchange</header>\n      <div>\n      <Spinner animation=\"border\" size=\"sm\" variant=\"warning\"/>\n      <Spinner animation=\"border\" size=\"sm\" variant=\"warning\"/>\n      <Spinner animation=\"border\" size=\"sm\" variant=\"warning\"/>\n      <Spinner animation=\"border\" variant=\"warning\"/>\n      <Spinner animation=\"border\" variant=\"warning\"/>\n      <Spinner animation=\"border\" variant=\"warning\"/>\n      </div>\n    </Container>\n    )\n  }\n\n  return (\n    <Container>\n      <header>ART Coin Exchange</header>\n        <ARTCard \n          ausdContract={ausdContract}\n          currentUser={currentUser} \n          contract={contract}\n          signIn={signIn}\n          signOut={signOut}\n        />\n        <hr />\n        {currentUser && \n        <TradeCard \n          contract={contract}\n          accountId={currentUser.accountId}\n        />}\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as nearAPI from \"near-api-js\";\nimport getConfig from \"./config\";\n\n// Initializing contract\nasync function initContract() {\n  const nearConfig = getConfig(process.env.NODE_ENV || 'testnet');\n\n  // Initializing connection to the NEAR TestNet\n  const near = await nearAPI.connect({\n    deps: {\n      keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore()\n    },\n    ...nearConfig\n  });\n  // Needed to access wallet\n  const walletConnection = new nearAPI.WalletConnection(near);\n\n  // Load in account data\n  let currentUser;\n  if(walletConnection.getAccountId()) {\n    currentUser = {\n      accountId: walletConnection.getAccountId(),\n      balance: (await walletConnection.account().state()).amount\n    };\n  }\n\n  // Initializing our contract APIs by contract name and configuration\n  const contract = await new nearAPI.Contract(walletConnection.account(), nearConfig.contractName, {\n    // View methods are read-only – they don't modify the state, but usually return some value\n    viewMethods: [\n                  'get_total_balance', \n                  'get_unstaked_balance', \n                  'get_staked_balance', \n                  'get_price', \n                  'get_asset_price',\n                  'get_asset_balance'\n                ],\n    // Change methods can modify the state, but you don't receive the returned value when called\n    changeMethods: [\n                    'stake_and_mint', \n                    'burn_to_unstake', \n                    'get_some_art',\n                    'buy_asset_with_ausd',\n                    'sell_asset_to_ausd',\n                    'transfer',\n                    'buy_art_with_near'\n                  ],\n    // Sender is the account ID to initialize transactions.\n    // getAccountId() will return empty string if user is still unauthorized\n    sender: walletConnection.getAccountId()\n  });\n\n  const ausdContract = await new nearAPI.Contract(walletConnection.account(), 'ausd.artcoin.testnet', {\n    // View methods are read-only – they don't modify the state, but usually return some value\n    viewMethods: ['get_balance'],\n    // Change methods can modify the state, but you don't receive the returned value when called\n    changeMethods: [],\n    // Sender is the account ID to initialize transactions.\n    // getAccountId() will return empty string if user is still unauthorized\n    sender: walletConnection.getAccountId()\n  });\n\n  return { contract, currentUser, nearConfig, walletConnection, ausdContract };\n}\n\nwindow.nearInitPromise = initContract()\n  .then(({ contract, currentUser, nearConfig, walletConnection, ausdContract }) => {\n    ReactDOM.render(\n      <App\n        ausdContract={ausdContract}\n        contract={contract}\n        currentUser={currentUser}\n        nearConfig={nearConfig}\n        wallet={walletConnection}\n      />,\n      document.getElementById('root')\n    );\n  });\n\n"],"sourceRoot":""}